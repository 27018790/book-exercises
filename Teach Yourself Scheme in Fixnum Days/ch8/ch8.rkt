#lang racket

(require mzlib/defmacro)
;;In Racket, an 'else' branch is mandatory for 'if', so use 'cond' instead
(define-macro (when test . branch)
  (list 'cond (cons test branch)))
(when #t (display "hi") (newline))
(when #f (display "hi") (newline))
(define-macro (unless test . branch)
  (list 'cond (cons (list 'not test) branch)))
(unless #t (display "hi") (newline))
(unless #f (display "hi") (newline))
(define-macro (unless test . branch)
  (cons 'when (cons (list 'not test) branch)))
(unless #t (display "hi") (newline))
(unless #f (display "hi") (newline))

(define-macro (when test . branch)
  `(cond (,test ,@branch)))
(when #t (display "hi") (newline))
(when #f (display "hi") (newline))

(define-macro (my-or x y)
  `(if ,x ,x ,y))
(my-or 1 2)
(my-or #f 2)
(my-or (begin (display "doing first argument")
              (newline)
              #t)
       2)
(define-macro (my-or x y)
  `(let ((temp ,x))
     (if temp temp ,y)))
(my-or (begin (display "doing first argument")
              (newline)
              #t)
       2)
(define temp 3)
(my-or #f temp)
(define-macro (my-or x y)
  `(let ((+temp ,x))
     (if +temp +temp ,y)))
(my-or #f temp)
(define-macro (my-or x y)
  (let ((temp (gensym)))
    `(let ((,temp ,x))
       (if ,temp ,temp ,y))))
(my-or #f temp)

(require "fluid-let.rkt")
(define x 1)
(define y 2)
(fluid-let ((x 9)
            (y (add1 y)))
  (display (+ x y))
  (newline))
